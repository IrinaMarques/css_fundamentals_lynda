=======================
3.1 Working with fonts
=======================

Controlling typography.

Choose a font for the website:
- web fonts
- system fonts

System Fonts:  Fonts requested in the  CSS had to be installed on the client machine.
- Serif
Times
Times New Roman
Georgia
- Sans-serif
Arial
Helvetica
Verdana
Geneva
- Monospace
Courier
Courier New
Monaco
- Cursive
Comic Sans

--> img/system_fonts.png

Web Fonts: Web fonts refer to the technique of having the browser downloan and install fonts requested in the page's styles, using the @font-face syntax. 

@font face

CSS Font Options:
- Allow the browser to display its default font
- Specify a system font and provide fallback options
- Use @font-face to point to a hosted font resource

====================
3.2 Formatting text
====================

- font-family - To define a font
- font-size - Define a Size
- font-weight 
- font-style
- font-variant
- text-transform
- text-align
- text-indent - Allows you to set a value to indent the first line of a block-level element such as a paragraph.
- letter-spacing
- letter-height
 
Fixed Units vs. Relative Units
- Fixed units are displayed at the requested size, regardless of device or context
- Relative units are displayed relative to the environment in which they are found

==========================
3.3 What is the box model?
==========================

The box Model: Refers to the physical properties of an element's rectangular box. These are margins, borders, padding, and content width and height.

Margin

Border:
border-width
border-style
border-color

Padding

Width and Height

Box-sizing:
content-box
border-box
--> img/box-sizing.png

Box Model Considerations:
- If a property is not declared, you can't assume the value is 0.
- Elements often have default margins that you need to account for.
-  A 100% width property when combined with padding and borders can create elements that are alrger than their parent.

========================
3.4 Margins and Padding
========================
- Padding -

Padding syntax:

Indiviual properties:
- padding-top://values;
- padding-right://values;
- padding-bottom://values;
- padding-left://values;

Shorthand notation:
- padding: 10px 20px 15px 10px; (top right bottom left)
- padding: 10px 20px 15px; (top (left and right) bottom)
- padding: 10px 10px; ((top and bottom)(right and left))
- padding: 10px; (all sides)

Padding considerations:
Parent element - If the width property of a block-level element is not set, the element will expand to fill the parent, and allow padding to define the content width. 

- Margins -

- Represents the space between elements.
- Margins values are not calculated as part of an element's total width.
- Most elements have a default margin you must account for.

Margin syntax:

Indiviual properties:
- margin-top://values;
- margin-right://values;
- margin-bottom://values;
- margin-left://values;

Shorthand notation:
- margin: 10px 20px 15px 10px; (top right bottom left)
- margin: 10px 20px 15px; (top (left and right) bottom)
- margin: 10px 10px; ((top and bottom)(right and left))
- margin: 10px; (all sides)

Padding Considerations:
Vertical margins collapse, with the larger of the top or bottom margin values used to calculate the amount of space between elements.
Margins only collapse vertically; horizontal margins combine to create the total amount of spacing between elements.

============
3.5 Borders
============

Define the outside edge of elements, and are usually used to apply a decorative effect to specific elements. Borders can be used to help define elements and set them apart from other elements, can also provide text rules between elements.

Three properties:
- style
- width
- color

Can be defined for the top, right, bottom, and left sides individually, or defined for the entire element at the same time.

Shorthand:
border: wight style color
--> img/border_syntax.png

Borders affect the overall width of an element.

Border Styles - ten values:
- solid
- dotted
- dashed
- double
- groove
- ridge
- inset
- outset
--> img/border_styles.png

Border Images: Allows you to take a single image and slice it up so that the corners of the image align to the element corners, and the sides either repeat or stretch. The image is shown as the border of the element, with the border-width property dictating how much of the image is shown.

Outlines:
- Outlines have been a part of CSS since the 
 specification.
- They can only be set fot the entire element, not individual sides.
- The total width of an element is not affeted; in instances of touching elements, outlines will overlap.
- There is poor overall support, especially in older browsers.

===============
3.6 Background
===============

--> img/background_syntax.png

Background Area: Extend all the way to the inside edge of an element's border.

Backgrounds display behind an element's content.

The default style for most elements is to have a transparent background. 

By explicitly setting the background property, you can choose to display solid colors, gradients, or even images behind an element's content.

Background-options:
- background-color
- background: linear-gradient
- background-image: url()

It's possible an element have both backgound-color and background image. An it's possible to have multiple background images.

======================
3.7 Working with color
======================

CSS Color Properties:
- border-color:red;
- background-color:#fff;
- color: rbg(255,128,0);

Color property it's used to define the color for the content of an element.

Color Name 
Hexadecimal Notation and hexadecimal shorthand
RGB color values
HSL (Hue, Saturation, Lightness)
Opacity - allows us to define transparency from 0 to 0.5

HSL:
Hue: 0-360
Saturation: 0-100%
Lightness: 0-100%

================================
3.8 Common units of measurement
================================

lenght

Absolute values: fixed values
- in - inches
- cm - centimeters
- mm - millimeters
- q - quarter millimeters
- pt - points
- pc - picas
- px - pixels

Pixels: 
Pixels are a foundational unit of measurement for the web. 
Difference between a device pixel, and a reference pixel.

Device pixels refer to the individual pixels that make up a devices screen.
Reference pixel, the definition for them is fairly technical, but the result is an abstract value, that roughly equals 1/96th of an inch based on the distance of the viewer.

Relative values: their value is relative to the length of another property.
- em - ems
- rem - root ems
- ex - exes
- ch - character
- vw - viewport width
- vh - viewport height
- vmin - viewport minimum
- vmax - viewport maximum

EMS:
--> img/ems.png
--> img/ems2.png

Ex, Rem, and Ch:
- Ex is based on the "x-height" of a font.
- Root ems are like ems; only they're relative to the root unit (body, html), not the element's immediate parent. 
- Character units are sized relative to the '0' glyph.

Viewport Units:
- vh and vw are equal to 1/100th o the viweport's width or height.
- vmin and vmax are equal to 1/100th of the viewport's minimum or maximun height.
- support is still uneven for these units

Percentages:
% relative to is parent element.
Great for responsive layouts.

========================
3.9 Element positioning
========================

CSS Positioning Schemes:
- Normal flow
- Element floating
- Absolute positioning

Normal flow: 

Is exactly what happens when you do nothing to control page layout.

Essentially, normal document flow takes the content in the order that it's found in the HTML and then stacks it, one element right on top of another. They just stack one top of another, much like blocks.

Inline elements, like images, links, or span tags, will appear inside of those block-level elements, they simply stack themselves based on the flowing of line boxes.

Position: static, relative, absolute, fixed, inherit.

- Relative: considered part of normal document flow, but it allows you to tweak an element's position based on offset values that you could give it. Offset values can be given for top, left, bottom, or the right of an element.
--> img/relative_positioning.png

- Absolute: not considered part of normal document flow. it removes the element from normal flow and repositions it based on those offset values given. 
--> img/absolute_positioning.png
parent with position relative
child with position absolute

Fixed: it's fixed over the viewport.

Element Stacking: can be controled by the z-property

============
3.10 Floats
============

The technique works changes based upon the relationship of the elements that are being floated. 

The elements below it then move up to occupy the space that the floated element used to occupy.
--> img/float_element.png

Clearing Floats:
By using the clear property, you can tell the browser to stop floating elements and go back to normal document flow. The clear property can be set to prevent elements from floating to the left or right of an element, or set to both.
--> img/clear_flow.png

Learning objectives:
- Learn how floated elements affect theis parents
- Focus on learning how clearing works
- Research how margins work between floated elements and static elements.
- Find out how the width of the parent elements affect the floating ability of nested elements. 
- look into the best practices that have evolved around floats

===============================
3.11 Basic CSS layout concepts
===============================

Basic Layout Concepts:
Content regions:
- header
- navigation
- content
- aside
- footer

Header
--> img/header.png
--> img/header_ex.png

Navigation:
--> img/navigation.png
--> img/navigation_ex.png

Aside and Content:
--> img/aside_content.png

Footer: 
--> img/footer.png

Learning Layout Techniques:
- Easy to learn the basics of CSS layouts
- Focus on learning how browser rendering differences affect layout
- Research multiple techniques, including emerging CSS3 methods - flexbox and CSS grid modules

===================================
3.12 Media types and media queries
===================================

Media Types:
Media types allow you to serve different styles to multiple devices based on device type.
- screen.css
- print.css

Media Query Syntax:
link element syntax
<link rel='stylesheet' type='text/css' href='styles.css' media='screen'>

@import syntax
@import url('styles.css') screen;

@media rule
@media screen {
//styles
}u

Media types:
- all
- print
- screen
- speech

Media Queries:
Media queries allow you to combine media types with media features and expressions to further control when styles are applied based on color, screen width, and other factors.

Media Syntax:
link rel='stylesheet' href='desktop.css'
media='[not|only] media type [and] (expression)'

@media [not|only] media type [and] (expression) {...}

Media Features:
Filtering style application based on media features gives us more flexibility when targeting devices. Essentially it allows us to ignore the devices themselves and only focus on when certain features are supported regardless of the device. 

--> img/media_features.png

@media only screen and (max-width:480px) {
/*styles*/
}